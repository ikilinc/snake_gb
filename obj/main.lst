                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12539 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _eatAppleIfPossible
                                     13 	.globl _adjustSnakeSpeed
                                     14 	.globl _collideWIthApple
                                     15 	.globl _gameover_if_collide_with_wall
                                     16 	.globl _gameover
                                     17 	.globl _check_input
                                     18 	.globl _startGame
                                     19 	.globl _enableSound
                                     20 	.globl _placeApple
                                     21 	.globl _initApple
                                     22 	.globl _check_collision_with_wall
                                     23 	.globl _move_down
                                     24 	.globl _move_up
                                     25 	.globl _move_left
                                     26 	.globl _move_right
                                     27 	.globl _move_snake
                                     28 	.globl _enlarge_snake
                                     29 	.globl _init_snake
                                     30 	.globl _hUGE_dosound
                                     31 	.globl _hUGE_init
                                     32 	.globl _rand
                                     33 	.globl _initrand
                                     34 	.globl _clock
                                     35 	.globl _abs
                                     36 	.globl _set_sprite_palette
                                     37 	.globl _set_bkg_palette
                                     38 	.globl _set_sprite_data
                                     39 	.globl _set_bkg_tiles
                                     40 	.globl _set_bkg_data
                                     41 	.globl _wait_vbl_done
                                     42 	.globl _joypad
                                     43 	.globl _add_VBL
                                     44 	.globl _apple
                                     45 ;--------------------------------------------------------
                                     46 ; special function registers
                                     47 ;--------------------------------------------------------
                                     48 ;--------------------------------------------------------
                                     49 ; ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area _DATA
                           000000    52 G$apple$0_0$0==.
      000000                         53 _apple::
      000000                         54 	.ds 2
                                     55 ;--------------------------------------------------------
                                     56 ; ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area _INITIALIZED
                           000000    59 Fmain$appleEatCount$0_0$0==.
      000000                         60 _appleEatCount:
      000000                         61 	.ds 1
                                     62 ;--------------------------------------------------------
                                     63 ; absolute external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area _DABS (ABS)
                                     66 ;--------------------------------------------------------
                                     67 ; global & static initialisations
                                     68 ;--------------------------------------------------------
                                     69 	.area _HOME
                                     70 	.area _GSINIT
                                     71 	.area _GSFINAL
                                     72 	.area _GSINIT
                                     73 ;--------------------------------------------------------
                                     74 ; Home
                                     75 ;--------------------------------------------------------
                                     76 	.area _HOME
                                     77 	.area _HOME
                                     78 ;--------------------------------------------------------
                                     79 ; code
                                     80 ;--------------------------------------------------------
                                     81 	.area _CODE
                           000000    82 	G$initApple$0$0	= .
                                     83 	.globl	G$initApple$0$0
                           000000    84 	C$main.c$28$0_0$132	= .
                                     85 	.globl	C$main.c$28$0_0$132
                                     86 ;src/main.c:28: void initApple()
                                     87 ;	---------------------------------
                                     88 ; Function initApple
                                     89 ; ---------------------------------
      000000                         90 _initApple::
                                     91 ;/opt/gbdk/include/gb/gb.h:1314: shadow_OAM[nb].tile=tile;
      000000 21r06r00                92 	ld	hl, #(_shadow_OAM + 6)
      000003 36 03                   93 	ld	(hl), #0x03
                           000005    94 	C$main.c$30$3_0$132	= .
                                     95 	.globl	C$main.c$30$3_0$132
                                     96 ;src/main.c:30: set_sprite_tile(APPLE_VRAM_SPRITE_INDEX, 3u); // 3 => position of apple sprite on vram
                           000005    97 	C$main.c$31$3_0$132	= .
                                     98 	.globl	C$main.c$31$3_0$132
                                     99 ;src/main.c:31: }
                           000005   100 	C$main.c$31$3_0$132	= .
                                    101 	.globl	C$main.c$31$3_0$132
                           000005   102 	XG$initApple$0$0	= .
                                    103 	.globl	XG$initApple$0$0
      000005 C9                     104 	ret
                           000006   105 Fmain$speed$0_0$0 == .
      000006                        106 _speed:
      000006                        107 	.ds 14
                           000014   108 Fmain$palette$0_0$0 == .
      000014                        109 _palette:
      000014 FF 7F                  110 	.dw #0x7fff
      000016 00 00                  111 	.dw #0x0000
      000018 87 02                  112 	.dw #0x0287
      00001A 1C 03                  113 	.dw #0x031c
                           00001C   114 Fmain$palette2$0_0$0 == .
      00001C                        115 _palette2:
      00001C BC 17                  116 	.dw #0x17bc
      00001E E7 22                  117 	.dw #0x22e7
      000020 C4 19                  118 	.dw #0x19c4
      000022 1D 00                  119 	.dw #0x001d
                           000024   120 	G$placeApple$0$0	= .
                                    121 	.globl	G$placeApple$0$0
                           000024   122 	C$main.c$33$3_0$136	= .
                                    123 	.globl	C$main.c$33$3_0$136
                                    124 ;src/main.c:33: void placeApple()
                                    125 ;	---------------------------------
                                    126 ; Function placeApple
                                    127 ; ---------------------------------
      000024                        128 _placeApple::
                           000024   129 	C$main.c$35$1_0$136	= .
                                    130 	.globl	C$main.c$35$1_0$136
                                    131 ;src/main.c:35: apple.x = ((abs(rand()) % (12u - 7u)) + 7u) * 8u;
      000024 CDr00r00               132 	call	_rand
      000027 7B                     133 	ld	a, e
      000028 07                     134 	rlca
      000029 9F                     135 	sbc	a, a
      00002A 57                     136 	ld	d, a
      00002B D5                     137 	push	de
      00002C CDr00r00               138 	call	_abs
      00002F E1                     139 	pop	hl
      000030 01 05 00               140 	ld	bc, #0x0005
      000033 C5                     141 	push	bc
      000034 D5                     142 	push	de
      000035 CDr00r00               143 	call	__moduint
      000038 E8 04                  144 	add	sp, #4
      00003A 7B                     145 	ld	a, e
      00003B C6 07                  146 	add	a, #0x07
      00003D 87                     147 	add	a, a
      00003E 87                     148 	add	a, a
      00003F 87                     149 	add	a, a
      000040 EAr00r00               150 	ld	(#_apple),a
                           000043   151 	C$main.c$36$1_0$136	= .
                                    152 	.globl	C$main.c$36$1_0$136
                                    153 ;src/main.c:36: apple.y = ((abs(rand()) % (15u - 7u)) + 7u) * 8u;
      000043 CDr00r00               154 	call	_rand
      000046 7B                     155 	ld	a, e
      000047 07                     156 	rlca
      000048 9F                     157 	sbc	a, a
      000049 57                     158 	ld	d, a
      00004A D5                     159 	push	de
      00004B CDr00r00               160 	call	_abs
      00004E E1                     161 	pop	hl
      00004F 7B                     162 	ld	a, e
      000050 E6 07                  163 	and	a, #0x07
      000052 C6 07                  164 	add	a, #0x07
      000054 87                     165 	add	a, a
      000055 87                     166 	add	a, a
      000056 87                     167 	add	a, a
      000057 EAr01r00               168 	ld	(#(_apple + 1)),a
                                    169 ;src/main.c:37: move_sprite(APPLE_VRAM_SPRITE_INDEX, apple.x, apple.y);
      00005A 47                     170 	ld	b, a
      00005B 21r00r00               171 	ld	hl, #_apple
      00005E 4E                     172 	ld	c, (hl)
                                    173 ;/opt/gbdk/include/gb/gb.h:1387: OAM_item_t * itm = &shadow_OAM[nb];
      00005F 21r04r00               174 	ld	hl, #(_shadow_OAM + 4)
                                    175 ;/opt/gbdk/include/gb/gb.h:1388: itm->y=y, itm->x=x;
      000062 78                     176 	ld	a, b
      000063 22                     177 	ld	(hl+), a
      000064 71                     178 	ld	(hl), c
                           000065   179 	C$main.c$37$3_0$136	= .
                                    180 	.globl	C$main.c$37$3_0$136
                                    181 ;src/main.c:37: move_sprite(APPLE_VRAM_SPRITE_INDEX, apple.x, apple.y);
                           000065   182 	C$main.c$38$3_0$136	= .
                                    183 	.globl	C$main.c$38$3_0$136
                                    184 ;src/main.c:38: }
                           000065   185 	C$main.c$38$3_0$136	= .
                                    186 	.globl	C$main.c$38$3_0$136
                           000065   187 	XG$placeApple$0$0	= .
                                    188 	.globl	XG$placeApple$0$0
      000065 C9                     189 	ret
                           000066   190 	G$enableSound$0$0	= .
                                    191 	.globl	G$enableSound$0$0
                           000066   192 	C$main.c$40$3_0$140	= .
                                    193 	.globl	C$main.c$40$3_0$140
                                    194 ;src/main.c:40: void enableSound()
                                    195 ;	---------------------------------
                                    196 ; Function enableSound
                                    197 ; ---------------------------------
      000066                        198 _enableSound::
                           000066   199 	C$main.c$42$1_0$140	= .
                                    200 	.globl	C$main.c$42$1_0$140
                                    201 ;src/main.c:42: NR52_REG = 0x80;
      000066 3E 80                  202 	ld	a, #0x80
      000068 E0r00                  203 	ldh	(_NR52_REG + 0), a
                           00006A   204 	C$main.c$43$1_0$140	= .
                                    205 	.globl	C$main.c$43$1_0$140
                                    206 ;src/main.c:43: NR51_REG = 0xFF;
      00006A 3E FF                  207 	ld	a, #0xff
      00006C E0r00                  208 	ldh	(_NR51_REG + 0), a
                           00006E   209 	C$main.c$44$1_0$140	= .
                                    210 	.globl	C$main.c$44$1_0$140
                                    211 ;src/main.c:44: NR50_REG = 0x77;
      00006E 3E 77                  212 	ld	a, #0x77
      000070 E0r00                  213 	ldh	(_NR50_REG + 0), a
                           000072   214 	C$main.c$45$1_0$140	= .
                                    215 	.globl	C$main.c$45$1_0$140
                                    216 ;src/main.c:45: }
                           000072   217 	C$main.c$45$1_0$140	= .
                                    218 	.globl	C$main.c$45$1_0$140
                           000072   219 	XG$enableSound$0$0	= .
                                    220 	.globl	XG$enableSound$0$0
      000072 C9                     221 	ret
                           000073   222 	G$startGame$0$0	= .
                                    223 	.globl	G$startGame$0$0
                           000073   224 	C$main.c$47$1_0$141	= .
                                    225 	.globl	C$main.c$47$1_0$141
                                    226 ;src/main.c:47: void startGame()
                                    227 ;	---------------------------------
                                    228 ; Function startGame
                                    229 ; ---------------------------------
      000073                        230 _startGame::
                           000073   231 	C$main.c$49$1_0$141	= .
                                    232 	.globl	C$main.c$49$1_0$141
                                    233 ;src/main.c:49: initrand(clock());
      000073 CDr00r00               234 	call	_clock
      000076 D5                     235 	push	de
      000077 CDr00r00               236 	call	_initrand
      00007A E1                     237 	pop	hl
                           00007B   238 	C$main.c$50$1_0$141	= .
                                    239 	.globl	C$main.c$50$1_0$141
                                    240 ;src/main.c:50: init_snake();
      00007B CDr00r00               241 	call	_init_snake
                           00007E   242 	C$main.c$51$1_0$141	= .
                                    243 	.globl	C$main.c$51$1_0$141
                                    244 ;src/main.c:51: initApple();
      00007E CDr00r00               245 	call	_initApple
                           000081   246 	C$main.c$52$1_0$141	= .
                                    247 	.globl	C$main.c$52$1_0$141
                                    248 ;src/main.c:52: placeApple();
      000081 CDr24r00               249 	call	_placeApple
                           000084   250 	C$main.c$53$1_0$141	= .
                                    251 	.globl	C$main.c$53$1_0$141
                                    252 ;src/main.c:53: appleEatCount = 0;
      000084 21r00r00               253 	ld	hl, #_appleEatCount
      000087 36 00                  254 	ld	(hl), #0x00
                           000089   255 	C$main.c$54$1_0$141	= .
                                    256 	.globl	C$main.c$54$1_0$141
                                    257 ;src/main.c:54: SHOW_BKG;
      000089 F0r00                  258 	ldh	a, (_LCDC_REG + 0)
      00008B F6 01                  259 	or	a, #0x01
      00008D E0r00                  260 	ldh	(_LCDC_REG + 0), a
                           00008F   261 	C$main.c$55$1_0$141	= .
                                    262 	.globl	C$main.c$55$1_0$141
                                    263 ;src/main.c:55: SHOW_SPRITES;
      00008F F0r00                  264 	ldh	a, (_LCDC_REG + 0)
      000091 F6 02                  265 	or	a, #0x02
      000093 E0r00                  266 	ldh	(_LCDC_REG + 0), a
                           000095   267 	C$main.c$56$1_0$141	= .
                                    268 	.globl	C$main.c$56$1_0$141
                                    269 ;src/main.c:56: }
                           000095   270 	C$main.c$56$1_0$141	= .
                                    271 	.globl	C$main.c$56$1_0$141
                           000095   272 	XG$startGame$0$0	= .
                                    273 	.globl	XG$startGame$0$0
      000095 C9                     274 	ret
                           000096   275 	G$check_input$0$0	= .
                                    276 	.globl	G$check_input$0$0
                           000096   277 	C$main.c$58$1_0$142	= .
                                    278 	.globl	C$main.c$58$1_0$142
                                    279 ;src/main.c:58: void check_input()
                                    280 ;	---------------------------------
                                    281 ; Function check_input
                                    282 ; ---------------------------------
      000096                        283 _check_input::
                           000096   284 	C$main.c$60$1_0$142	= .
                                    285 	.globl	C$main.c$60$1_0$142
                                    286 ;src/main.c:60: const UINT8 joypadState = joypad();
      000096 CDr00r00               287 	call	_joypad
      000099 4B                     288 	ld	c, e
                           00009A   289 	C$main.c$62$1_0$142	= .
                                    290 	.globl	C$main.c$62$1_0$142
                                    291 ;src/main.c:62: if ((joypadState == J_RIGHT) && (snake.direction[1] != 0))
      00009A 79                     292 	ld	a, c
      00009B 3D                     293 	dec	a
      00009C 20 0D                  294 	jr	NZ, 00113$
      00009E FAr03r00               295 	ld	a, (#(_snake + 3) + 0)
      0000A1 B7                     296 	or	a, a
      0000A2 28 07                  297 	jr	Z, 00113$
                           0000A4   298 	C$main.c$64$2_0$143	= .
                                    299 	.globl	C$main.c$64$2_0$143
                                    300 ;src/main.c:64: move_right();
      0000A4 C5                     301 	push	bc
      0000A5 CDr00r00               302 	call	_move_right
      0000A8 C1                     303 	pop	bc
      0000A9 18 34                  304 	jr	00114$
      0000AB                        305 00113$:
                           0000AB   306 	C$main.c$66$1_0$142	= .
                                    307 	.globl	C$main.c$66$1_0$142
                                    308 ;src/main.c:66: else if (joypadState == J_DOWN && (snake.direction[0] != 0))
      0000AB 79                     309 	ld	a, c
      0000AC D6 08                  310 	sub	a, #0x08
      0000AE 20 0D                  311 	jr	NZ, 00109$
      0000B0 FAr02r00               312 	ld	a, (#(_snake + 2) + 0)
      0000B3 B7                     313 	or	a, a
      0000B4 28 07                  314 	jr	Z, 00109$
                           0000B6   315 	C$main.c$68$2_0$144	= .
                                    316 	.globl	C$main.c$68$2_0$144
                                    317 ;src/main.c:68: move_down();
      0000B6 C5                     318 	push	bc
      0000B7 CDr00r00               319 	call	_move_down
      0000BA C1                     320 	pop	bc
      0000BB 18 22                  321 	jr	00114$
      0000BD                        322 00109$:
                           0000BD   323 	C$main.c$70$1_0$142	= .
                                    324 	.globl	C$main.c$70$1_0$142
                                    325 ;src/main.c:70: else if (joypadState == J_LEFT && (snake.direction[1] != 0))
      0000BD 79                     326 	ld	a, c
      0000BE D6 02                  327 	sub	a, #0x02
      0000C0 20 0D                  328 	jr	NZ, 00105$
      0000C2 FAr03r00               329 	ld	a, (#(_snake + 3) + 0)
      0000C5 B7                     330 	or	a, a
      0000C6 28 07                  331 	jr	Z, 00105$
                           0000C8   332 	C$main.c$72$2_0$145	= .
                                    333 	.globl	C$main.c$72$2_0$145
                                    334 ;src/main.c:72: move_left();
      0000C8 C5                     335 	push	bc
      0000C9 CDr00r00               336 	call	_move_left
      0000CC C1                     337 	pop	bc
      0000CD 18 10                  338 	jr	00114$
      0000CF                        339 00105$:
                           0000CF   340 	C$main.c$74$1_0$142	= .
                                    341 	.globl	C$main.c$74$1_0$142
                                    342 ;src/main.c:74: else if (joypadState == J_UP && (snake.direction[0] != 0))
      0000CF 79                     343 	ld	a, c
      0000D0 D6 04                  344 	sub	a, #0x04
      0000D2 20 0B                  345 	jr	NZ, 00114$
      0000D4 FAr02r00               346 	ld	a, (#(_snake + 2) + 0)
      0000D7 B7                     347 	or	a, a
      0000D8 28 05                  348 	jr	Z, 00114$
                           0000DA   349 	C$main.c$76$2_0$146	= .
                                    350 	.globl	C$main.c$76$2_0$146
                                    351 ;src/main.c:76: move_up();
      0000DA C5                     352 	push	bc
      0000DB CDr00r00               353 	call	_move_up
      0000DE C1                     354 	pop	bc
      0000DF                        355 00114$:
                           0000DF   356 	C$main.c$78$1_0$142	= .
                                    357 	.globl	C$main.c$78$1_0$142
                                    358 ;src/main.c:78: if (joypadState & J_START)
      0000DF CB 79                  359 	bit	7, c
                           0000E1   360 	C$main.c$80$2_0$147	= .
                                    361 	.globl	C$main.c$80$2_0$147
                                    362 ;src/main.c:80: startGame();
      0000E1 C2r73r00               363 	jp	NZ,_startGame
                           0000E4   364 	C$main.c$82$1_0$142	= .
                                    365 	.globl	C$main.c$82$1_0$142
                                    366 ;src/main.c:82: }
                           0000E4   367 	C$main.c$82$1_0$142	= .
                                    368 	.globl	C$main.c$82$1_0$142
                           0000E4   369 	XG$check_input$0$0	= .
                                    370 	.globl	XG$check_input$0$0
      0000E4 C9                     371 	ret
                           0000E5   372 	G$gameover$0$0	= .
                                    373 	.globl	G$gameover$0$0
                           0000E5   374 	C$main.c$84$1_0$148	= .
                                    375 	.globl	C$main.c$84$1_0$148
                                    376 ;src/main.c:84: void gameover()
                                    377 ;	---------------------------------
                                    378 ; Function gameover
                                    379 ; ---------------------------------
      0000E5                        380 _gameover::
                           0000E5   381 	C$main.c$87$1_0$148	= .
                                    382 	.globl	C$main.c$87$1_0$148
                                    383 ;src/main.c:87: HIDE_SPRITES;
      0000E5 F0r00                  384 	ldh	a, (_LCDC_REG + 0)
      0000E7 E6 FD                  385 	and	a, #0xfd
      0000E9 E0r00                  386 	ldh	(_LCDC_REG + 0), a
                           0000EB   387 	C$main.c$88$1_0$148	= .
                                    388 	.globl	C$main.c$88$1_0$148
                                    389 ;src/main.c:88: }
                           0000EB   390 	C$main.c$88$1_0$148	= .
                                    391 	.globl	C$main.c$88$1_0$148
                           0000EB   392 	XG$gameover$0$0	= .
                                    393 	.globl	XG$gameover$0$0
      0000EB C9                     394 	ret
                           0000EC   395 	G$gameover_if_collide_with_wall$0$0	= .
                                    396 	.globl	G$gameover_if_collide_with_wall$0$0
                           0000EC   397 	C$main.c$90$1_0$149	= .
                                    398 	.globl	C$main.c$90$1_0$149
                                    399 ;src/main.c:90: void gameover_if_collide_with_wall()
                                    400 ;	---------------------------------
                                    401 ; Function gameover_if_collide_with_wall
                                    402 ; ---------------------------------
      0000EC                        403 _gameover_if_collide_with_wall::
                           0000EC   404 	C$main.c$92$1_0$149	= .
                                    405 	.globl	C$main.c$92$1_0$149
                                    406 ;src/main.c:92: if (check_collision_with_wall())
      0000EC CDr00r00               407 	call	_check_collision_with_wall
      0000EF 7B                     408 	ld	a, e
      0000F0 B7                     409 	or	a, a
                           0000F1   410 	C$main.c$94$2_0$150	= .
                                    411 	.globl	C$main.c$94$2_0$150
                                    412 ;src/main.c:94: gameover();
      0000F1 C2rE5r00               413 	jp	NZ,_gameover
                           0000F4   414 	C$main.c$96$1_0$149	= .
                                    415 	.globl	C$main.c$96$1_0$149
                                    416 ;src/main.c:96: }
                           0000F4   417 	C$main.c$96$1_0$149	= .
                                    418 	.globl	C$main.c$96$1_0$149
                           0000F4   419 	XG$gameover_if_collide_with_wall$0$0	= .
                                    420 	.globl	XG$gameover_if_collide_with_wall$0$0
      0000F4 C9                     421 	ret
                           0000F5   422 	G$collideWIthApple$0$0	= .
                                    423 	.globl	G$collideWIthApple$0$0
                           0000F5   424 	C$main.c$98$1_0$151	= .
                                    425 	.globl	C$main.c$98$1_0$151
                                    426 ;src/main.c:98: UINT8 collideWIthApple()
                                    427 ;	---------------------------------
                                    428 ; Function collideWIthApple
                                    429 ; ---------------------------------
      0000F5                        430 _collideWIthApple::
                           0000F5   431 	C$main.c$100$1_0$151	= .
                                    432 	.globl	C$main.c$100$1_0$151
                                    433 ;src/main.c:100: return (snake.x == apple.x && snake.y == apple.y);
      0000F5 21r00r00               434 	ld	hl, #_snake
      0000F8 4E                     435 	ld	c, (hl)
      0000F9 21r00r00               436 	ld	hl, #_apple
      0000FC 46                     437 	ld	b, (hl)
      0000FD 79                     438 	ld	a, c
      0000FE 90                     439 	sub	a, b
      0000FF 20 0C                  440 	jr	NZ, 00103$
      000101 21r01r00               441 	ld	hl, #(_snake + 1)
      000104 4E                     442 	ld	c, (hl)
      000105 21r01r00               443 	ld	hl, #(_apple + 1)
      000108 46                     444 	ld	b, (hl)
      000109 79                     445 	ld	a, c
      00010A 90                     446 	sub	a, b
      00010B 28 03                  447 	jr	Z, 00104$
      00010D                        448 00103$:
      00010D 1E 00                  449 	ld	e, #0x00
      00010F C9                     450 	ret
      000110                        451 00104$:
      000110 1E 01                  452 	ld	e, #0x01
                           000112   453 	C$main.c$101$1_0$151	= .
                                    454 	.globl	C$main.c$101$1_0$151
                                    455 ;src/main.c:101: }
                           000112   456 	C$main.c$101$1_0$151	= .
                                    457 	.globl	C$main.c$101$1_0$151
                           000112   458 	XG$collideWIthApple$0$0	= .
                                    459 	.globl	XG$collideWIthApple$0$0
      000112 C9                     460 	ret
                           000113   461 	G$adjustSnakeSpeed$0$0	= .
                                    462 	.globl	G$adjustSnakeSpeed$0$0
                           000113   463 	C$main.c$103$1_0$152	= .
                                    464 	.globl	C$main.c$103$1_0$152
                                    465 ;src/main.c:103: void adjustSnakeSpeed()
                                    466 ;	---------------------------------
                                    467 ; Function adjustSnakeSpeed
                                    468 ; ---------------------------------
      000113                        469 _adjustSnakeSpeed::
                           000113   470 	C$main.c$105$1_0$152	= .
                                    471 	.globl	C$main.c$105$1_0$152
                                    472 ;src/main.c:105: if (appleEatCount >= 5)
      000113 FAr00r00               473 	ld	a, (#_appleEatCount)
      000116 D6 05                  474 	sub	a, #0x05
      000118 D8                     475 	ret	C
                           000119   476 	C$main.c$107$2_0$153	= .
                                    477 	.globl	C$main.c$107$2_0$153
                                    478 ;src/main.c:107: if (snake.currentSpeed <= 4)
      000119 01r58r00               479 	ld	bc, #_snake+88
      00011C 0A                     480 	ld	a, (bc)
      00011D 5F                     481 	ld	e, a
      00011E 3E 04                  482 	ld	a, #0x04
      000120 93                     483 	sub	a, e
      000121 38 03                  484 	jr	C, 00102$
                           000123   485 	C$main.c$109$3_0$154	= .
                                    486 	.globl	C$main.c$109$3_0$154
                                    487 ;src/main.c:109: snake.currentSpeed++;
      000123 7B                     488 	ld	a, e
      000124 3C                     489 	inc	a
      000125 02                     490 	ld	(bc), a
      000126                        491 00102$:
                           000126   492 	C$main.c$111$2_0$153	= .
                                    493 	.globl	C$main.c$111$2_0$153
                                    494 ;src/main.c:111: appleEatCount = 0;
      000126 21r00r00               495 	ld	hl, #_appleEatCount
      000129 36 00                  496 	ld	(hl), #0x00
                           00012B   497 	C$main.c$113$1_0$152	= .
                                    498 	.globl	C$main.c$113$1_0$152
                                    499 ;src/main.c:113: }
                           00012B   500 	C$main.c$113$1_0$152	= .
                                    501 	.globl	C$main.c$113$1_0$152
                           00012B   502 	XG$adjustSnakeSpeed$0$0	= .
                                    503 	.globl	XG$adjustSnakeSpeed$0$0
      00012B C9                     504 	ret
                           00012C   505 	G$eatAppleIfPossible$0$0	= .
                                    506 	.globl	G$eatAppleIfPossible$0$0
                           00012C   507 	C$main.c$115$1_0$155	= .
                                    508 	.globl	C$main.c$115$1_0$155
                                    509 ;src/main.c:115: void eatAppleIfPossible()
                                    510 ;	---------------------------------
                                    511 ; Function eatAppleIfPossible
                                    512 ; ---------------------------------
      00012C                        513 _eatAppleIfPossible::
                           00012C   514 	C$main.c$118$1_0$155	= .
                                    515 	.globl	C$main.c$118$1_0$155
                                    516 ;src/main.c:118: if (collideWIthApple() == 1)
      00012C CDrF5r00               517 	call	_collideWIthApple
      00012F 1D                     518 	dec	e
      000130 C0                     519 	ret	NZ
                           000131   520 	C$main.c$120$2_0$156	= .
                                    521 	.globl	C$main.c$120$2_0$156
                                    522 ;src/main.c:120: enlarge_snake();
      000131 CDr00r00               523 	call	_enlarge_snake
                           000134   524 	C$main.c$121$2_0$156	= .
                                    525 	.globl	C$main.c$121$2_0$156
                                    526 ;src/main.c:121: placeApple();
      000134 CDr24r00               527 	call	_placeApple
                           000137   528 	C$main.c$122$2_0$156	= .
                                    529 	.globl	C$main.c$122$2_0$156
                                    530 ;src/main.c:122: appleEatCount++;
      000137 21r00r00               531 	ld	hl, #_appleEatCount
      00013A 34                     532 	inc	(hl)
                           00013B   533 	C$main.c$123$2_0$156	= .
                                    534 	.globl	C$main.c$123$2_0$156
                                    535 ;src/main.c:123: adjustSnakeSpeed();
                           00013B   536 	C$main.c$125$1_0$155	= .
                                    537 	.globl	C$main.c$125$1_0$155
                                    538 ;src/main.c:125: }
                           00013B   539 	C$main.c$125$1_0$155	= .
                                    540 	.globl	C$main.c$125$1_0$155
                           00013B   541 	XG$eatAppleIfPossible$0$0	= .
                                    542 	.globl	XG$eatAppleIfPossible$0$0
      00013B C3r13r01               543 	jp	_adjustSnakeSpeed
                           00013E   544 	G$main$0$0	= .
                                    545 	.globl	G$main$0$0
                           00013E   546 	C$main.c$127$1_0$158	= .
                                    547 	.globl	C$main.c$127$1_0$158
                                    548 ;src/main.c:127: void main(void)
                                    549 ;	---------------------------------
                                    550 ; Function main
                                    551 ; ---------------------------------
      00013E                        552 _main::
                           00013E   553 	C$main.c$134$1_0$158	= .
                                    554 	.globl	C$main.c$134$1_0$158
                                    555 ;src/main.c:134: }
      00013E F3                     556 	di
                           00013F   557 	C$main.c$131$2_0$159	= .
                                    558 	.globl	C$main.c$131$2_0$159
                                    559 ;src/main.c:131: hUGE_init(&ingame_track);
      00013F 11r00r00               560 	ld	de, #_ingame_track
      000142 D5                     561 	push	de
      000143 CDr00r00               562 	call	_hUGE_init
      000146 E1                     563 	pop	hl
                           000147   564 	C$main.c$132$2_0$159	= .
                                    565 	.globl	C$main.c$132$2_0$159
                                    566 ;src/main.c:132: add_VBL(hUGE_dosound);
      000147 11r00r00               567 	ld	de, #_hUGE_dosound
      00014A D5                     568 	push	de
      00014B CDr00r00               569 	call	_add_VBL
      00014E E1                     570 	pop	hl
                           00014F   571 	C$main.c$133$2_0$159	= .
                                    572 	.globl	C$main.c$133$2_0$159
                                    573 ;src/main.c:133: enableSound();
      00014F CDr66r00               574 	call	_enableSound
      000152 FB                     575 	ei
                           000153   576 	C$main.c$136$1_0$158	= .
                                    577 	.globl	C$main.c$136$1_0$158
                                    578 ;src/main.c:136: set_sprite_data(0, 7u, SimpleSnakeTiles);
      000153 11r00r00               579 	ld	de, #_SimpleSnakeTiles
      000156 D5                     580 	push	de
      000157 21 00 07               581 	ld	hl, #0x700
      00015A E5                     582 	push	hl
      00015B CDr00r00               583 	call	_set_sprite_data
      00015E E8 04                  584 	add	sp, #4
                           000160   585 	C$main.c$138$1_0$158	= .
                                    586 	.globl	C$main.c$138$1_0$158
                                    587 ;src/main.c:138: set_bkg_palette(0, 1u, &palette[0]);
      000160 11r14r00               588 	ld	de, #_palette
      000163 D5                     589 	push	de
      000164 AF                     590 	xor	a, a
      000165 3C                     591 	inc	a
      000166 F5                     592 	push	af
      000167 CDr00r00               593 	call	_set_bkg_palette
      00016A E8 04                  594 	add	sp, #4
                           00016C   595 	C$main.c$139$1_0$158	= .
                                    596 	.globl	C$main.c$139$1_0$158
                                    597 ;src/main.c:139: set_sprite_palette(0, 1u, &palette2[0]);
      00016C 11r1Cr00               598 	ld	de, #_palette2
      00016F D5                     599 	push	de
      000170 AF                     600 	xor	a, a
      000171 3C                     601 	inc	a
      000172 F5                     602 	push	af
      000173 CDr00r00               603 	call	_set_sprite_palette
      000176 E8 04                  604 	add	sp, #4
                           000178   605 	C$main.c$141$1_0$158	= .
                                    606 	.globl	C$main.c$141$1_0$158
                                    607 ;src/main.c:141: set_bkg_data(0, 9u, snake_bg_tiles);
      000178 11r00r00               608 	ld	de, #_snake_bg_tiles
      00017B D5                     609 	push	de
      00017C 21 00 09               610 	ld	hl, #0x900
      00017F E5                     611 	push	hl
      000180 CDr00r00               612 	call	_set_bkg_data
      000183 E8 04                  613 	add	sp, #4
                           000185   614 	C$main.c$142$1_0$158	= .
                                    615 	.globl	C$main.c$142$1_0$158
                                    616 ;src/main.c:142: set_bkg_tiles(0, 0, 20u, 20u, snake_bg_map);
      000185 11r00r00               617 	ld	de, #_snake_bg_map
      000188 D5                     618 	push	de
      000189 21 14 14               619 	ld	hl, #0x1414
      00018C E5                     620 	push	hl
      00018D AF                     621 	xor	a, a
      00018E 0F                     622 	rrca
      00018F F5                     623 	push	af
      000190 CDr00r00               624 	call	_set_bkg_tiles
      000193 E8 06                  625 	add	sp, #6
                           000195   626 	C$main.c$144$1_0$158	= .
                                    627 	.globl	C$main.c$144$1_0$158
                                    628 ;src/main.c:144: startGame();
      000195 CDr73r00               629 	call	_startGame
                           000198   630 	C$main.c$147$1_0$158	= .
                                    631 	.globl	C$main.c$147$1_0$158
                                    632 ;src/main.c:147: while (1)
      000198                        633 00102$:
                           000198   634 	C$main.c$149$2_0$160	= .
                                    635 	.globl	C$main.c$149$2_0$160
                                    636 ;src/main.c:149: check_input();
      000198 CDr96r00               637 	call	_check_input
                           00019B   638 	C$main.c$151$2_0$160	= .
                                    639 	.globl	C$main.c$151$2_0$160
                                    640 ;src/main.c:151: eatAppleIfPossible();
      00019B CDr2Cr01               641 	call	_eatAppleIfPossible
                           00019E   642 	C$main.c$152$2_0$160	= .
                                    643 	.globl	C$main.c$152$2_0$160
                                    644 ;src/main.c:152: move_snake();
      00019E CDr00r00               645 	call	_move_snake
                           0001A1   646 	C$main.c$153$2_0$160	= .
                                    647 	.globl	C$main.c$153$2_0$160
                                    648 ;src/main.c:153: gameover_if_collide_with_wall();
      0001A1 CDrECr00               649 	call	_gameover_if_collide_with_wall
                           0001A4   650 	C$main.c$155$2_0$160	= .
                                    651 	.globl	C$main.c$155$2_0$160
                                    652 ;src/main.c:155: wait_vbl_done();
      0001A4 CDr00r00               653 	call	_wait_vbl_done
                           0001A7   654 	C$main.c$157$1_0$158	= .
                                    655 	.globl	C$main.c$157$1_0$158
                                    656 ;src/main.c:157: }
                           0001A7   657 	C$main.c$157$1_0$158	= .
                                    658 	.globl	C$main.c$157$1_0$158
                           0001A7   659 	XG$main$0$0	= .
                                    660 	.globl	XG$main$0$0
      0001A7 18 EF                  661 	jr	00102$
                                    662 	.area _CODE
                                    663 	.area _INITIALIZER
                           000000   664 Fmain$__xinit_appleEatCount$0_0$0 == .
      000000                        665 __xinit__appleEatCount:
      000000 00                     666 	.db #0x00	; 0
                                    667 	.area _CABS (ABS)
